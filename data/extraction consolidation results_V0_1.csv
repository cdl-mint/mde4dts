Title|DT Definition|modeling language|note on modeling language|model type|model processing technique|model usage technique|source|target|purpose of MDE application|purpose of DT|use case domain|system lifecycle phase|twinning target|twin lifecycle phase|purpose /expected benefit of using models|open challenges|Technological Readiness Level|notes|Use Case
A framework for Model-Driven Engineering of resilient software-controlled systems|"dynamic virtual model of a system, processor, or service, with data (e.g., sensor data) from physical systems or processes integrated into it.; ""Software digital twins representations provide a key abstraction, providing an agile interface on hardware components, capturing operational behaviours of physical assets and processes, also providing refined and interpreted data, to enable diagnoses, predictive maintenance tasks, process plannings, process optimizations, virtual prototyping, and simulation."""|SysML BDD||structure|Model to Model Transformation||SysML BDD|Knowledge Base of software digital twins (Metamodel proposed in Figure 5 of the paper) -> in fact, this is the class diagram of their knowledge base|reuse information created by reliability engineers (sysml) for concrete software implementation|mirror items for monitoring and control operations|H Â— Transportation and Storage|Design|Individual Systems, such as automated cars (Atorf and Roßmann, 2018), gas turbines (Dawes et al., 2019), or manufacturing machines (Debroy et al., 2017).|As-Designed|formal specification of information in the form of models allows the application of MDE techniques (model transformations)||1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||limited traffic zone access control
A framework for Model-Driven Engineering of resilient software-controlled systems||Knowledge base model|contribution of the paper||Model to Model Transformation||Fault Trees|FaultTreeAnalyzer (metamodel proposed in Figure 8)||||Design|||||||
A Methodology for Digital Twin Modeling and Deployment for Industry 4.0|"""The digital twin (DT) is a virtual representation of a physical object, which has been proposed as one of the key concepts for Industry 4.0."""|AutomationML||structure|code generation||AutomationML models|Restful API, Html pages|Synchronizing data from the physical system with the model|Syncronizing data from the physical system with the model|C Â— Manufacturing|Design|Individual Systems, such as automated cars (Atorf and Roßmann, 2018), gas turbines (Dawes et al., 2019), or manufacturing machines (Debroy et al., 2017).||model the physical device, serving as the virtual representation of the device; to model the DT itself, serving as a configuration reference for the deployment phase. ; reusability of similar basic components; model the physical device; serving as the virtual representation of the device; to model the DT itsel - serving as a configuration reference for the deployment phase||1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||refinery automationsystem with four valves 
A Methodology for Digital Twin Modeling and Deployment for Industry 4.0||AutomationML||structure|model interpretation||AutomationML models|DT runtime memory||||Operate|Systems of Systems, such as complete factories (Biesinger et al., 2018), oil wells (Kosenkov et al., 2018), or railway systems (Vatn, 2018).||||||refinery automationsystem with four valves 
A Novel Methodology to Construct Digital Twin Models for Spacecraft Operations Using Fault and Behaviour Trees|"""a digital twin of a system consists of a set of models of the system, a set of digital shadows, and provides a set of services to use the data and models purposefully with respect to the original system [Da20]."""|Fault Tree||behavior|||Fault Trees|Operations-Dedicated Models (ODMs)|||M Â— Professional, Scientific and Technical Activities|Operate|Individual Systems, such as automated cars (Atorf and Roßmann, 2018), gas turbines (Dawes et al., 2019), or manufacturing machines (Debroy et al., 2017).|As-Operated|||1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||ground station of a spacecraft
A Novel Methodology to Construct Digital Twin Models for Spacecraft Operations Using Fault and Behaviour Trees||ODM Models|ODM = DT, but no dedicated language mentioned|structure|||||||||||||||
A Novel Methodology to Construct Digital Twin Models for Spacecraft Operations Using Fault and Behaviour Trees||AutomationML||structure|||DT model (=ODM model)|UI-based monitoring tools||||Design|||||||
AML4DT: A Model-Driven Framework for Developing and Maintaining Digital Twins with AutomationML||Azure DTDL||structure|||AML|DT-MM||"""By integrating the digital and physical worlds, the DT enables real-time monitoring of systems and processes and helps, for example, to reduce downtimes and detect errors at an early stage""; interface to running system"|N Â— Administrative and Support Service Activities|Implement|Individual Systems, such as automated cars (Atorf and Roßmann, 2018), gas turbines (Dawes et al., 2019), or manufacturing machines (Debroy et al., 2017).|As-Designed|reduces complexity through abstraction, enables automation through model-driven engineering; represent information across asset lifecycle, reuse information based on machine-readable format of models||1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||Air Quality Opitmization System
AML4DT: A Model-Driven Framework for Developing and Maintaining Digital Twins with AutomationML||AutomationML|focus on CAEX|structure|||DT-MM|Json Files||||Maintain|||||||
AML4DT: A Model-Driven Framework for Developing and Maintaining Digital Twins with AutomationML|a virtual model of a city|DT-MM: platform-neutral DT metamodel|contribution of the paper|structure|||||||||||||||
Case Study on Automated and Continuous Reliability Assessment of Software-Defined Manufacturing Based on Digital Twins|"""A digital twin is a software system consisting of models, data, and services to interact with a cyber-physical system for a particular purpose [3, 21, 22]. """|SysML v2||structure|Model to Model Transformation||SysML v2 structure models|Fault Trees|optimization|They serve to monitor, better understand and optimize the behavior of their respective counterparts.|C Â— Manufacturing|Operate|Individual Systems, such as automated cars (Atorf and Roßmann, 2018), gas turbines (Dawes et al., 2019), or manufacturing machines (Debroy et al., 2017).|As-Operated|||1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||
Case Study on Automated and Continuous Reliability Assessment of Software-Defined Manufacturing Based on Digital Twins||SysML v2||behavior|Model to Model Transformation||SysML v2 action sequences|Markov chains||||Operate||As-Operated|||||
Combining Low-Code Programming and SDL-Based Modeling with Snap! in the Industry 4.0 Context|"""a Digital Twin is a virtual reproduction of a system based on simulations, real-time and historical data that allows representing, understanding, and predicting scenarios of the past, present, and future, with verified and validated models, and synchronized at a specified frequency and fidelity with the system"""|SDL||behavior|Model to Model Transformation||SDL model|Discrete Event System Specification (formal model for simulation engines)|execute/simulate modeled behavior||P Â— Education|Design|Processes, e.g., business processes (Rambow-Hoeschele et al., 2018), medical processes (Karakra et al., 2018), or recycling processes (Popa et al., 2018).|As-Designed|low-code programming; enable industrial users to test and/or build their own Digital Twin models at a suitable abstraction level and with low entry barriers ; create an open-source and web-based tool that facilitates the implementation and validation of Digital Twin prototypes||"4-5: das Ding lÃ¤uft ""im Labor"""||
Combining Low-Code Programming and SDL-Based Modeling with Snap! in the Industry 4.0 Context||SDL||behavior|model interpretation||SDL model|Snap!||||Design||As-Designed|||||
CPSAML: A Language and Code Generation Framework for Digital Twin Based Monitoring of Mobile Cyber-Physical Systems|"middleware between CPS and a monitoring cockpit; ""A digital twin of a system consists of a set of models of the system, a set of digital shadows and their aggregation and abstraction collected from a system, and a set of services that allow using the data and models purposefully with respect to the original system"""|SysML v2||structure|Model to Model Transformation|Multi Paradigm Approach|CPSAML|SysML (partial model)|"Integration of CPS and Information Systems; transform System Architect vision (CPSAML) into starting point for System Engineer (partial SysML model); ""better support both the system architect and the operator for the development of a mobile CPS. The system architect only keeps the focus on her interests through the introduced DSL, while the operator is supported by the generated cockpit application. In addition, the used code generation should save a lot of implementation effort for developers"""|"aggregates data from CPS into a ""single system snapchot"""|I Â— Accommodation and Food Service Activities|Design|Individual Systems, such as automated cars (Atorf and Roßmann, 2018), gas turbines (Dawes et al., 2019), or manufacturing machines (Debroy et al., 2017).|As-Designed|"""Model engineering abstracts real world concepts in a way, such that only the relevant properties are left. A model therefore is a simplified representation of reality. This helps planning and designing complex systems, as a model should give a common sense of the underlying system."""||"4-5: das Ding lÃ¤uft ""im Labor"""|github repository: https://github.com/me-big-tuwien-ac-at/cpsaml|Roomba floor cleaning robot
CPSAML: A Language and Code Generation Framework for Digital Twin Based Monitoring of Mobile Cyber-Physical Systems||CPSAML|contribution of the paper|structure|code generation||SysML (complete model)|CPS software code (ROS Packages, DT, Monitoring Cockpit). Sprachen: Java, Typescript, Python, Docker||||Implement|||||||
Interface Development for Digital Twin of an Electric Motor Based on Empirical Performance Model|"""The concept of Digital Twin (DT) is creating and maintaining a digital representation of the real physical entity and supporting its performance through simulation and optimization tools, which are fed with real and updated data""; ""A perfect DT will be identical to the real physical entity in terms of appearance and behavior with the extra advantage of making future predictions."""|Unity 3D simulation model| describing detailed physics of twinned asset|behavior, physics|code generation||Unity Model|Simulation Controller||3D simulation model that is updated with live data from the twinned asset|H Â— Transportation and Storage|Operate|Individual Systems, such as automated cars (Atorf and Roßmann, 2018), gas turbines (Dawes et al., 2019), or manufacturing machines (Debroy et al., 2017).|As-Designed|||1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||
Interface Development for Digital Twin of an Electric Motor Based on Empirical Performance Model||Unity 3D simulation model| describing detailed physics of twinned asset|behavior, physics|code generation||Unity Model|ROS Bridge||||Operate|||||||
Digital Twins Driving Model Based on Petri Net in Industrial Pipeline|"""the digital twin, that is, real-time data synchronization and feedback control of the entity"""|Petri Net||behavior|model interpretation||Petrinet|real time simulation of state||online syncronization of physical and digital system|C Â— Manufacturing|Operate|Processes, e.g., business processes (Rambow-Hoeschele et al., 2018), medical processes (Karakra et al., 2018), or recycling processes (Popa et al., 2018).|As-Operated|single source of truth for simulation||1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||Suit tailoring
Enabling Semantic Interoperability of Asset Administration Shells through an Ontology-Based Modeling Method|= AAS Model|OWL Ontology + OML Vocabulary||rule|||OML Vocabulary|UML Profile||""" the Asset Administration Shell (AAS), provides a syntactic interoperability interface for all assets involved in smart factories"""|C Â— Manufacturing|Design|Systems of Systems, such as complete factories (Biesinger et al., 2018), oil wells (Kosenkov et al., 2018), or railway systems (Vatn, 2018).|As-Designed|formal definition that allows reasoning on/interpretation of models, interoperability||1-3: die Technologie gibt's, evtl. am Toy Example gezeigt|twinning target is systems-of-systems, including modeling of individual systems|robotic cell (niryo ned for gripping + turtlebot for transportation)
Enabling Semantic Interoperability of Asset Administration Shells through an Ontology-Based Modeling Method||UML Profile|||||||||||||||||
Enabling Semantic Interoperability of Asset Administration Shells through an Ontology-Based Modeling Method||AAS|||||||||||||||||
Generating customized low-code development platforms for digital twins|"""A digital twin is a set of models of the system, a set of digital shadows and their aggregation and abstraction collected from a system, and a set of services that allow using the data and models purposefully with respect to the original system"""|DSL Component||structure|code generation||DSL component + GUI models for editor and viewer + DT components|Digital Twin Implementation: Low-code editor for DT configuration|generation of low-code development platform;  generation of dt architecture; visualization; data modelling; adaptive behavior of DT; recognizing error states in CPS behavior; generating a communication protocol;|"realize self-adaptation loop for CPS; ""Leveraging DTs that monitor and control the system of interest can reduce configuration time, save energy, and prevent waste."""|C Â— Manufacturing|Implement|Individual Systems, such as automated cars (Atorf and Roßmann, 2018), gas turbines (Dawes et al., 2019), or manufacturing machines (Debroy et al., 2017).|As-Operated|"Custom Low-code development for domain experts; configurability: easily configure 1 implementation for different CPSs; easily integrate different implementations (monti arc as definition of common interfaces); ""The models we use for configuration are more abstract than programming languages and allow domain experts to create powerful full digital twin applications nonetheless."""|account for future variability; DT as part of an ecosystem|"4-5: das Ding lÃ¤uft ""im Labor"""||injection molding machine
Generating customized low-code development platforms for digital twins||MontiArc||structure|code generation||MontiArc model|Digital Twin Implementation: Java code, Software Architecture Components + Glue Code||||Implement|||||||
Generating customized low-code development platforms for digital twins||GUI Language||structure|code generation||GUI Model|Digital Twin Implementation: DT Cockpit||||Implement|||||||
Generating customized low-code development platforms for digital twins||UML Classdiagram||structure|code generation||CD|Digital Twin Implementation: Java code (Backend)||||Implement|||||||
Generating customized low-code development platforms for digital twins||Case-based reasoning (CBR9)||rule|model interpretation||CBR|Reasoner Component of DT Architecture||||Operate|||||||
Generating customized low-code development platforms for digital twins||Event-Condition-Action (ECA) language||rule|model interpretation||ECA|Evaluator Component of DT Archtiecture||||Operate|||||||
Generating customized low-code development platforms for digital twins||Communication specification language||behavior|code generation||Communication specification|Java Code for communication between CPS and DT||||Implement|||||||
Generating Digital Twin Cockpits for Parameter Management in the Engineering of Wind Turbines||UML Class Diagram||structure|Model to Model Transformation||UML Class Diagram|UI Model|Derive UI from Cd; Data structure and DT cockpit backend and frontend api generation; UI generation||D Â— Electricity, Gas, Steam and Air Conditioning Supply|Implement|Individual Systems, such as automated cars (Atorf and Roßmann, 2018), gas turbines (Dawes et al., 2019), or manufacturing machines (Debroy et al., 2017).|As-Designed|"reduce complexity in system design by bridging the gap between high-level requirements and high-detail implementations; ""Suitable models in the early phase are engineering models and models to describe behavior-to-be that can be simulated and analyzed"""||1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||cooling system of a wind turbine
Generating Digital Twin Cockpits for Parameter Management in the Engineering of Wind Turbines||UI Model||structure|code generation||UML Class Diagram|Part of DT UI Cockpit (Python + Typescript)||||Implement|||||||
Generating Digital Twin Cockpits for Parameter Management in the Engineering of Wind Turbines||||structure|code generation||UI Model|Part of DT UI Cockpit (Typescript)||||Implement|||||||
Generative and Model-driven SDK development for the Industrie 4.0 Digital Twin|" ""A digital twin allows us to reason about a physical and/or ideal assets in the virtual (i.e. cyber) space thus providing a necessary foundation for complex and large cyber-physical systems."""|AAS model||structure|code generation||AAS model|GPL (shown for C#/Java) Stubs + Contracts||reasoning in the virtual space||Implement||As-Designed||further GPLs, build parser for OWL ontologies|1-3: die Technologie gibt's, evtl. am Toy Example gezeigt|no demonstration or evaluation provided, only description of the prototypical implementation of the proposed concept|
Integration of SysML Models in a 3D Environment for Virtual Testing and Validation|"""A Digital Twin is
a digital 3D - CAD replica of a living or non-living physical entity, allowing to replicate the same behavior as that of the actual
component"""|SysML|Block Definition Diagram, Internal Block Diagram, Requirements Diagram and a State Machine Diagram|structure|||SysML Modelle|Unity Model|"3D Visualization of SYSML model; ""comprehend and understand the complexity of the models."""||D Â— Electricity, Gas, Steam and Air Conditioning Supply|Design|Systems of Systems, such as complete factories (Biesinger et al., 2018), oil wells (Kosenkov et al., 2018), or railway systems (Vatn, 2018).|||"However, more research and development are needed to improve the 3D representation of the SysML
model. In future work, the steps presented in the aforementioned
timeline will be implemented."|1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||
Integration of SysML Models in a 3D Environment for Virtual Testing and Validation||Unity 3D Model|||||||||||||||||
Digital Twin of an Electrical Motor Based on Empirical Performance Model|"""The concept of Digital Twin (DT) is creating and maintaining a digital representation of the real physical entity and supporting its performance through simulation and optimization tools, which are fed with real and updated data""; ""A perfect DT will be identical to the real physical entity in terms of appearance and behavior with the extra advantage of making future predictions."""|Unity 3D simulation model|describing detailed physics of twinned asset|behavior, physics|||Unity Model|Simulation Controller||3D simulation model that is updated with live data from the twinned asset|H Â— Transportation and Storage|Operate|Individual Systems, such as automated cars (Atorf and Roßmann, 2018), gas turbines (Dawes et al., 2019), or manufacturing machines (Debroy et al., 2017).|As-Designed|||1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||
Digital Twin of an Electrical Motor Based on Empirical Performance Model||||structure|||Unity Model|ROS Bridge||||Operate|||||||
Knowledge driven rapid development of white box digital twins for industrial plant systems||SADL ontology||structure|||SADL ontology|M&CML control systems model||enable a virtual sand-box environment simulating the behaviour of a plant to perform analyses and predictions.|D Â— Electricity, Gas, Steam and Air Conditioning Supply|Implement|Individual Systems, such as automated cars (Atorf and Roßmann, 2018), gas turbines (Dawes et al., 2019), or manufacturing machines (Debroy et al., 2017).|As-Designed|||1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||power plant
Knowledge driven rapid development of white box digital twins for industrial plant systems||Control Systems Model (M&CML)||behavior|||M&CML|fininte state machine||||Implement|||||||
Knowledge driven rapid development of white box digital twins for industrial plant systems||finite state machines (FSM)|represented in SCXML||||||||||||||||
Meta-model-based shop-floor digital twin architecture, modeling and application|"""DT is considered a new paradigm of modeling and simulationtechnology, extending the use of models to all stages of the product""; the Shop-floor Digital Twin (SDT), as the digital counterpart of physical entities including the humans, machines, material, methods and environments in the existing shop-floor, mirrors the physical shop-floor behavior and performance in the virtual space. The digital counterpart is comprised of a series of semantic digital models and simulation models of the physical shop-floor and has the automatic data synchronization between the physical and virtual space. By establishing the automatic data flow between the physical shop-floor and digital counterpart, the semantic digital models and simulation 
models could be converted to digital shadow and further evolved into SDT."|SysML BDD|||model interpretation||raw data (conforming to data model)|SysML BDD||"Provide Self-Adapation/Optimization based on (i) data from PT, (ii) operations offered by the PT; ""DT has a strong vitality in the whole product lifecycle and could provide strong support for the digital and intelligent transformation of manufacturing industry in the aspects of virtual model construction and cyber-physical information fusion."""|C Â— Manufacturing|Operate|Systems of Systems, such as complete factories (Biesinger et al., 2018), oil wells (Kosenkov et al., 2018), or railway systems (Vatn, 2018).|As-Operated|||"4-5: das Ding lÃ¤uft ""im Labor"""||shopfloor
Meta-model-based shop-floor digital twin architecture, modeling and application||Data Model|contribution of the paper||||||||||||||||
Model-Driven Development of a Digital Twin for Injection Molding|"""A digital twin of a system consists of a set of models of the system, a set of digital shadows, and provides a set of services to use the data and models purposefully with respect to the original system."""|MontiArc||structure|||MontiArc|Java|DT software architecture; domain description; specifying the behavior of the DT based on Event, condition action; Setting up an experiment for optimization; communication;|realizes self-adaptation loop based on MAPE (cf. Figure 2)|C Â— Manufacturing|Implement|Individual Systems, such as automated cars (Atorf and Roßmann, 2018), gas turbines (Dawes et al., 2019), or manufacturing machines (Debroy et al., 2017).|As-Designed|domain experts can easily optimize their injection modling machine with domain expressions; optimization of injection molding process through repeated execution of DOE; describing the DT’s situations (events) and reactions.||1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||
Model-Driven Development of a Digital Twin for Injection Molding||UML Class Diagram||structure|||Classdiagrams|Java||||Operate||As-Designed|||||
Model-Driven Development of a Digital Twin for Injection Molding||Event language||behavior|||Event model|||||Operate, Maintain||As-Designed, As-Operated|||||
Model-Driven Development of a Digital Twin for Injection Molding||design of experiment language||rule||||||||Maintain||As-Operated|||||
Model-Driven Development of a Digital Twin for Injection Molding||OPC UA DSL||structure|||OPCUA model|Java||||Operate||As-Designed|||||
Model-Driven Development of a Digital Twin for Injection Molding||Tagging Language||||tagging|UML Class Diagram|||||Design||As-Designed|||||
Model-Driven Digital Twin Construction: Synthesizing the Integration of Cyber-Physical Systems with Their Information Systems|"""A digital twin (DT) of a system consists of a set of models  of the system, a set of contextual data traces and/or their aggregation and abstraction collected from a system, and a set of services that allow using the data and models purposefully  with respects to the original system."""|UML Class Diagram||structure|||tagging model, Class Diagram, MontiArc Model|extended MontiArc Model|||I Â— Accommodation and Food Service Activities|Design|||"""Reducing the effort for engineering the communication interfaces between CPS and DT implemented as information systems"""|Although model-driven software engineering (MDSE) provides the necessary methods to generate these connections, these methods have not yet been applied to integrated development and connection of DTs to CPSs.|1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||automatic fire extinguishing system
Model-Driven Digital Twin Construction: Synthesizing the Integration of Cyber-Physical Systems with Their Information Systems||MontiArc ADL||structure|||MontiArc model|GPL code for CPS||||Implement|Individual Systems, such as automated cars (Atorf and Roßmann, 2018), gas turbines (Dawes et al., 2019), or manufacturing machines (Debroy et al., 2017).|As-Designed|||||
Model-Driven Digital Twin Construction: Synthesizing the Integration of Cyber-Physical Systems with Their Information Systems||tagging language||structure|||class diagram|digital twin information system||||Implement||As-Designed|||||
Model-Driven Digital Twin Construction: Synthesizing the Integration of Cyber-Physical Systems with Their Information Systems||GUI DSL||structure|||GUI Model|Webpage||||Implement||As-Designed|||||
Model-Driven Digital Twin Construction: Synthesizing the Integration of Cyber-Physical Systems with Their Information Systems||OCL||rule|||MontiArc ADL + Tagging applied on ports of adl model|new MontiArc ADL with components receiving tagged ports||||Implement||As-Designed|||||
Model-driven engineering city spaces via bidirectional model transformations|""" In the realm of smart cities, a digital twin is a virtual model of a cityÂ—a model representation of the physical world""; a virtual model of a city"|City GML 3D city model||structure|||CityGML|cyber-physical spaces||cyber-physical spaces model upon which formal reasoning can be performed|F Â— Construction|Plan|Systems of Systems, such as complete factories (Biesinger et al., 2018), oil wells (Kosenkov et al., 2018), or railway systems (Vatn, 2018).|As-Designed||investigate pluggable custom application policies and support arbitrary CityGML features. generalization of synchronization to a many-to-one model; being able to support multi-model sources might enable support of a wider range of applications dealing with wide area services.|1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||smart city
Model-driven engineering city spaces via bidirectional model transformations||cyber-physical spaces|||||||||||||||||
On the Engineering of IoT-Intensive Digital Twin Software Systems||undefined|"only ""structural and behavioral models"" mentioned"|structure|||structural model of the PT|Model Synchronizer + Model Manager component||"""Coping with the dynamic and uncertain characteristics of the physical world (i.e., faced by the real-twin)"""||Design|Individual Systems, such as automated cars (Atorf and Roßmann, 2018), gas turbines (Dawes et al., 2019), or manufacturing machines (Debroy et al., 2017).|As-Designed|||1-3: die Technologie gibt's, evtl. am Toy Example gezeigt|very high-level concept, no application to a particular example/domain, no example models given|
On the Engineering of IoT-Intensive Digital Twin Software Systems||||behavior|||behavioral model of the PT|Model Synchronizer + Model Manager component||||Design|||||||
Proof of Concept for a Roundtrip Engineering IS for the New Enterprise in the Industry 4.0 Era|"""The concept of Digital Twin is reserved for denoting a digital representation which is fully integrated with its Physical Twin (i.e. data flow between the physical object and the digital object in both directions) [4]. Likewise, we understand the Digital Twin as a software component that is i) model and data driven (it gets inputs from both cyber and physical objects; i.e., it can be a model that gets input from another model or from a physical object) and ii) can control physical devices (can operate on them). """|BPMN||behavior|code generation||BPMN|Python Drone control code|||H Â— Transportation and Storage|Implement|Individual Systems, such as automated cars (Atorf and Roßmann, 2018), gas turbines (Dawes et al., 2019), or manufacturing machines (Debroy et al., 2017).|As-Designed|||1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||Drone fleet
Semantic Interoperability of Digital Twins: Ontology-based Capability Checking in AAS Modeling Framework||OWL Ontology||rule|||OML|UML Stereotypes||AAS model, enriched with semantic annotations based on OWL ontology|C Â— Manufacturing|Design||As-Designed|||1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||robotic cell (niryo ned for gripping + turtlebot for transportation)
Semantic Interoperability of Digital Twins: Ontology-based Capability Checking in AAS Modeling Framework||OML Vocabulary||structure|||AAS|OWL Individuals (MaRCO)||||Design|||||||
Semantic Interoperability of Digital Twins: Ontology-based Capability Checking in AAS Modeling Framework||AAS||structure|||OWL Ontology + OWL Individuals|capability matchmaker||||Design|||||||
Semantic Interoperability of Digital Twins: Ontology-based Capability Checking in AAS Modeling Framework||OWL Individuals|instantiated OWL ontology|structure|||AAS Model|user interface created by the authors (cf. Section 4.C)||||Design|||||||
Towards a Digital Twin for Cyber-Physical Production Systems: A Multi-Paradigm Modeling Approach in the Postal Industry|"""However, the characteristics commonly associated to the DT are that it must be able to 1) behave like the real system during its entire life cycle, 2) allow to predict possible failures and 3) take autonomous decisions accordingly. Moreover, it appears to be fundamental to have a seamless connection and synchronization between the DT and the system."""|BPMN||behavior|Model to Model Transformation||BPMN|Activity Diagram|Multi-paradigm modeling: convert BPMN Model into an executable AD; Multi-paradigm modeling: extract structural information from AD|"""emulate the sorting CPPS via Multi-Agent System"""|N Â— Administrative and Support Service Activities|Design|Processes, e.g., business processes (Rambow-Hoeschele et al., 2018), medical processes (Karakra et al., 2018), or recycling processes (Popa et al., 2018).|As-Designed|||1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||sorting robot of a postal center
Towards a Digital Twin for Cyber-Physical Production Systems: A Multi-Paradigm Modeling Approach in the Postal Industry||UML Activity Diagram||behavior|Model to Model Transformation||Activity Diagram|Class Diagram||||Design|||||||
Towards a Digital Twin for Cyber-Physical Production Systems: A Multi-Paradigm Modeling Approach in the Postal Industry||UML Class Diagram|||||||||||||||||
Towards a Model-Driven Architecture for Interactive Digital Twin Cockpits|"""A digital twin of a system consists of a set of models of the system, a set of digital shadows and their aggregation and abstraction collected from a system, and a set of services that allow using the data and models purposefully with respect to the original system. """|MontiArc||structure|||CD|Java Code|||C Â— Manufacturing|Implement|Individual Systems, such as automated cars (Atorf and Roßmann, 2018), gas turbines (Dawes et al., 2019), or manufacturing machines (Debroy et al., 2017).|As-Designed|no manual writing of code needed, because code generation can be applied||1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||
Towards a Model-Driven Architecture for Interactive Digital Twin Cockpits||MontiGem GUI Model||structure|||GUI Model|DT cockpits||||Implement|||||||
Towards a Model-Driven Architecture for Interactive Digital Twin Cockpits||Class Diagram||structure|||MontiArc model|system architecture||||Implement|||||||
Towards Reactive Planning with Digital Twins and Model-Driven Optimization|"""DTs enable a bi-directional data flow between a physical system and its virtual representation, requiring different software components to enable this communication"""|EMF Meta-Models| + according Models|structure|||Henshin model|Digital Twin||provide an interface to both simulation and PT|application to generic optimization problem - no specific domain|Operate|Individual Systems, such as automated cars (Atorf and Roßmann, 2018), gas turbines (Dawes et al., 2019), or manufacturing machines (Debroy et al., 2017).|As-Designed, As-Operated|||1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||
Twin Process Model Driven Machining Quality Optimization for Complex Parts|"""Digital twin is an efficient method to realize simulation, monitoring and control of multi scale and physical quantity."""|Twin Process Model|Twin Process Model = model containing structural and behavioral (process) information, stored as XML, but no language/metamodel described|structure|||Twin Process Model|Numeric Control (NC)Code||"efficiently realizes ""simulation, monitoring and control of multi scale and physical quantity"""|C Â— Manufacturing|Operate|Individual Systems, such as automated cars (Atorf and Roßmann, 2018), gas turbines (Dawes et al., 2019), or manufacturing machines (Debroy et al., 2017).|As-Designed|||1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||
Understanding and Improving Model-Driven IoT Systems through Accompanying Digital Twins|"""A digital twin (DT) of a system consists of a set of models of the system, a set of contextual data traces and/or their aggregation and abstraction collected from a system, and a set of services that allow using the data and models purposefully with respects to the original system.""; ""Digital twins (DTs) are digital representations of cyber-physical systems. They monitor systems to offer services to analyze, control, and optimize the system. Alas, there is no commonly agreed on definition of DTs"""|MontiThings||structure|Model-to-Model transformation||MontiThings model or real system|MontiThings model or reproduced system|"""generates a reproduction model from the original models and the system traces. Developers can use the reproduction model to retrospectively analyze the system and refine the architecture models for the next iteration""; ""One of the advantages of our model-driven approach is that there is no manual work involved when recording or replaying system traces.""; Automatically generate controller code"|" collect  required data; ""The DT collects data from the generated IoT code, reproduces the data traces, adapts the input models accordingly, and re-generates the new software based on the adapted models"""|I — Accommodation and Food Service Activities|Operate|Individual Systems, such as automated cars (Atorf and Roßmann, 2018), gas turbines (Dawes et al., 2019), or manufacturing machines (Debroy et al., 2017).|As-Operated|||1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||"smart lawn watering system; heating, ventilation, and air conditioning of a
smart home"
Understanding and Improving Model-Driven IoT Systems through Accompanying Digital Twins||||structure|Code generation||MontiThings|IoT controller code in C++||||Implement|||||||
Using UML and OCL Models to Realize High-Level Digital Twins|"""A Digital Twin (DT) is a comprehensive digital representation of an actual system, service or product (the Physical Twin, PT), synchronized at a specified frequency and fidelity"""|UML CD + OCL constraints||structure|model interpretation||UML class diagram|uml cd adapter that interprets CD and adapts a data lake accordingly (data lake stores data from the PT)|adapt a data lake according to CD|DT = UML class diagram; configures data lake that stores data from PT, which should be used by different services|H Â— Transportation and Storage|Operate||As-Designed|||1-3: die Technologie gibt's, evtl. am Toy Example gezeigt||lego mindstorms car
|||||||||||||||||||
|||||||||||||||||||
|||||||||||||||||||
|||||||||||||||||||
|||||||||||||||||||
|||||||||||||||||||
